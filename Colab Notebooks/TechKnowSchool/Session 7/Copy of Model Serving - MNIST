{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Model Serving - MNIST","version":"0.3.2","provenance":[{"file_id":"147KYy3fbl-N73U3DjDFjS31yvGN6rISE","timestamp":1567659510199}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"GTFVP_lNnSY5","colab_type":"code","colab":{}},"source":["!rm -r tfmodel"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"s4HzUCfcIltJ","colab_type":"code","outputId":"6e6acaa7-73f3-4074-e220-16a024a3eef1","executionInfo":{"status":"ok","timestamp":1567666066877,"user_tz":-330,"elapsed":6138,"user":{"displayName":"Rahul Pareek","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDEsDJVspDx5UBV261xZxUzCFr5PtbYyLWztMHdvA=s64","userId":"16393584037076024180"}},"colab":{"base_uri":"https://localhost:8080/","height":302}},"source":["!pip install tensorflow==1.11"],"execution_count":22,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: tensorflow==1.11 in /usr/local/lib/python3.6/dist-packages (1.11.0)\n","Requirement already satisfied: tensorboard<1.12.0,>=1.11.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.11.0)\n","Requirement already satisfied: setuptools<=39.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (39.1.0)\n","Requirement already satisfied: grpcio>=1.8.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.15.0)\n","Requirement already satisfied: absl-py>=0.1.6 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (0.7.1)\n","Requirement already satisfied: keras-applications>=1.0.5 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.0.8)\n","Requirement already satisfied: numpy>=1.13.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.16.4)\n","Requirement already satisfied: termcolor>=1.1.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.1.0)\n","Requirement already satisfied: astor>=0.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (0.8.0)\n","Requirement already satisfied: protobuf>=3.6.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (3.7.1)\n","Requirement already satisfied: gast>=0.2.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (0.2.2)\n","Requirement already satisfied: six>=1.10.0 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.12.0)\n","Requirement already satisfied: keras-preprocessing>=1.0.3 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (1.1.0)\n","Requirement already satisfied: wheel>=0.26 in /usr/local/lib/python3.6/dist-packages (from tensorflow==1.11) (0.33.6)\n","Requirement already satisfied: markdown>=2.6.8 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.12.0,>=1.11.0->tensorflow==1.11) (3.1.1)\n","Requirement already satisfied: werkzeug>=0.11.10 in /usr/local/lib/python3.6/dist-packages (from tensorboard<1.12.0,>=1.11.0->tensorflow==1.11) (0.15.5)\n","Requirement already satisfied: h5py in /usr/local/lib/python3.6/dist-packages (from keras-applications>=1.0.5->tensorflow==1.11) (2.8.0)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"DIacwIrGIh7P","colab_type":"code","outputId":"b1a92766-f0c5-459e-ef8a-75b5efb9285d","executionInfo":{"status":"ok","timestamp":1567666075759,"user_tz":-330,"elapsed":810,"user":{"displayName":"Rahul Pareek","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDEsDJVspDx5UBV261xZxUzCFr5PtbYyLWztMHdvA=s64","userId":"16393584037076024180"}},"colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["# Importing the necessary libraries\n","import tensorflow as tf\n","import numpy as np\n","import os\n","\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","# checking the tensorflow version\n","print(tf.__version__)"],"execution_count":30,"outputs":[{"output_type":"stream","text":["1.11.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"TJN6CkmEIxSq","colab_type":"code","colab":{}},"source":["# Loading the mnist data from the inbuit datasets\n","mnist = tf.keras.datasets.mnist\n","(train_images, train_labels), (test_images, test_labels) = mnist.load_data()\n","\n","# reshaping the image into a 1D numpy array and Normalizing the data\n","train_images = train_images.reshape(-1, 28 * 28) / 255.0\n","test_images = test_images.reshape(-1, 28 * 28) / 255.0"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"gsmVh0oZIzwV","colab_type":"code","colab":{}},"source":["def encode_labels(labels):\n","    \"\"\"\n","    :param labels: labels from dataset\n","    :return: One-Hot encoded labels\n","    \"\"\"\n","    return np.eye(10)[labels]"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"7vtNTLYAI13X","colab_type":"code","outputId":"c4b88b61-6c20-4472-da7e-6e400de85478","executionInfo":{"status":"ok","timestamp":1567666082470,"user_tz":-330,"elapsed":813,"user":{"displayName":"Rahul Pareek","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDEsDJVspDx5UBV261xZxUzCFr5PtbYyLWztMHdvA=s64","userId":"16393584037076024180"}},"colab":{"base_uri":"https://localhost:8080/","height":84}},"source":["# Encoding the training data\n","print(\"Printing the first label: \", train_labels[0])\n","encoded_train_labels = encode_labels(train_labels)\n","encoded_test_labels = encode_labels(test_labels)\n","print(\"Printing the first one-hot encoded label: \", encoded_train_labels[0])\n","\n","# Printing the shape\n","print(\"shape of labels(Before encoding) :\", train_labels.shape)\n","print(\"shape of labels(After encoding) :\", encoded_train_labels.shape)"],"execution_count":33,"outputs":[{"output_type":"stream","text":["Printing the first label:  5\n","Printing the first one-hot encoded label:  [0. 0. 0. 0. 0. 1. 0. 0. 0. 0.]\n","shape of labels(Before encoding) : (60000,)\n","shape of labels(After encoding) : (60000, 10)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"nuKUg-TUI4VA","colab_type":"code","outputId":"4e91ad2c-8a9d-4d23-dda9-279ca0f5d6c9","executionInfo":{"status":"ok","timestamp":1567666086162,"user_tz":-330,"elapsed":1091,"user":{"displayName":"Rahul Pareek","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDEsDJVspDx5UBV261xZxUzCFr5PtbYyLWztMHdvA=s64","userId":"16393584037076024180"}},"colab":{"base_uri":"https://localhost:8080/","height":281}},"source":["def display(index):\n","    \"\"\"\n","    :param index: index of the image in training data\n","    \"\"\"\n","    img = train_images[index]\n","    plt.title('Example %d. Label: %d' % (index, train_labels[index]))\n","    plt.imshow(img.reshape((28,28)), cmap=plt.cm.gray_r)\n","    \n","display(5)"],"execution_count":34,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n3I+ZtZH3+c0y1Wj4A/iRpCclzR5uBkmzJQ1IGhgcHGxwdWbWLI2G/+iIOBI4AThL0rFDZ4iI/ojo\ni4i+np6eBldnZs3SUPgjYnXxcz1wDzClGU2ZWevVHX5J+0gas+M6MBVY1qzGzKy1GjnaPw64R9KO\n+/luRDzYlK6sbVauXJmsz507N1l//PHHk/WlS5fudE+1Wrt2bbJ+9dVXt2zdu4O6wx8RzwMfaGIv\nZtZGPtVnlimH3yxTDr9Zphx+s0w5/GaZ8kd6dwO/+MUvKtauuuqq5LK33HJLsr5169ZkPSKS9YkT\nJ1asjRkzJrnsM888k6zfcccdyfqZZ55ZsXbYYYcll82Bt/xmmXL4zTLl8JtlyuE3y5TDb5Yph98s\nUw6/WaZ8nr8L/OY3v0nWL7jggmT99ttvr1jbtGlTXT3VatKkScn6Qw89VLG2bdu25LLVzsVX+1q4\nDRv8vbIp3vKbZcrhN8uUw2+WKYffLFMOv1mmHH6zTDn8Zpnyef4ucM899yTr1113XZs6eatDDjkk\nWV+wYEGyPmHChIq1FStW1NWTNYe3/GaZcvjNMuXwm2XK4TfLlMNvlimH3yxTDr9ZpnyevwtU+/75\nRvT29ibrU6ZMSdYvv/zyZD11Hr+a1HgD1npVt/ySbpS0XtKysmn7SVogaUXxc2xr2zSzZqvlZf9N\nwLQh0y4EHo6IQ4GHi9tmtgupGv6IeATYOGTyicDNxfWbgRlN7svMWqzeA37jImJNcX0tMK7SjJJm\nSxqQNFDtO9fMrH0aPtofpZEaK47WGBH9EdEXEX09PT2Nrs7MmqTe8K+TNB6g+Lm+eS2ZWTvUG/75\nwGnF9dOA+5rTjpm1S9Xz/JJuAz4G7C/pJeBi4DLgDklnAC8Ap7Syyd3d9ddfn6z39/cn61OnTq1Y\nq/Z5/AMOOCBZb6V169Z1bN1WQ/gjYmaF0iea3IuZtZHf3muWKYffLFMOv1mmHH6zTDn8ZpnyR3q7\nwIEHHpisz5kzpz2NtNljjz3W6Ray5i2/WaYcfrNMOfxmmXL4zTLl8JtlyuE3y5TDb5Ypn+fP3NVX\nX52s//a3v03WS1/kVJmkirVly5ZVrNXiqKOOStY/8pGPNHT/uztv+c0y5fCbZcrhN8uUw2+WKYff\nLFMOv1mmHH6zTPk8/y7g1VdfTdaXL19esfa1r30tuez9999fV087NHKev5pq33Mwb968ZH3EiBF1\n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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"lsfKvoTCI6ci","colab_type":"code","colab":{}},"source":["# Hyperparamters Config\n","\n","learning_rate = 0.01\n","epochs = 100\n","checkpoint_save_path = './tfmodel/'\n","model_save_path = checkpoint_save_path + 'model/'"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Ew20rkCWI8uW","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":508},"outputId":"58bb2042-cd5f-475d-9638-1290569b6cd8","executionInfo":{"status":"error","timestamp":1567667129282,"user_tz":-330,"elapsed":839,"user":{"displayName":"Rahul Pareek","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDEsDJVspDx5UBV261xZxUzCFr5PtbYyLWztMHdvA=s64","userId":"16393584037076024180"}}},"source":["# Starting the tensorflow session\n","sess = tf.Session()\n","\n","# Creating the placeholders for the inputs(images) and outputs(labels)\n","x = tf.placeholder(tf.float32, shape=[None, 784], name=\"x\")\n","y = tf.placeholder(tf.float32, shape=[None, 10], name=\"labels\")\n","\n","# Creating a simple neural network\n","denseLayer1 = tf.layers.dense(x, 512, activation=tf.nn.relu, name='fullyConnectedLayer1',reuse=tf.AUTO_REUSE)\n","dropoutLayer2 = tf.nn.dropout(denseLayer1, keep_prob=0.2)\n","logits = tf.layers.dense(dropoutLayer2, 10, name=\"output\",reuse=tf.AUTO_REUSE)\n","\n","# saving the error into a scalar variable\n","with tf.name_scope(\"error\"):\n","    error = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits_v2(logits=logits, labels=y), name=\"error\")\n","    tf.summary.scalar(\"error\", error)\n","    \n","# Defining the Adam Optimizer\n","with tf.name_scope(\"train\"):\n","    train_step = tf.train.AdamOptimizer(learning_rate).minimize(error)\n","\n","# Saving the accuracy to the scalar\n","with tf.name_scope(\"accuracy\"):\n","    correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(y, 1))\n","    accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n","    tf.summary.scalar(\"accuracy\", accuracy)\n","\n","# Summarizing all the summaries\n","summ = tf.summary.merge_all()\n","\n","# Initializing the saver for creating the checkpoints\n","saver = tf.train.Saver()\n","\n","# Initializing all global variables \n","sess.run(tf.global_variables_initializer())\n","\n","# Defining the save path\n","writer = tf.summary.FileWriter(checkpoint_save_path)\n","writer.add_graph(sess.graph)\n"],"execution_count":50,"outputs":[{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-50-d9bb56215827>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0;31m# Defining the Adam Optimizer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     18\u001b[0m \u001b[0;32mwith\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"train\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 19\u001b[0;31m     \u001b[0mtrain_step\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mAdamOptimizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlearning_rate\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mminimize\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merror\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;31m# Saving the accuracy to the scalar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/optimizer.py\u001b[0m in \u001b[0;36mminimize\u001b[0;34m(self, loss, global_step, var_list, gate_gradients, aggregation_method, colocate_gradients_with_ops, name, grad_loss)\u001b[0m\n\u001b[1;32m    409\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    410\u001b[0m     return self.apply_gradients(grads_and_vars, global_step=global_step,\n\u001b[0;32m--> 411\u001b[0;31m                                 name=name)\n\u001b[0m\u001b[1;32m    412\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    413\u001b[0m   def compute_gradients(self, loss, var_list=None,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/optimizer.py\u001b[0m in \u001b[0;36mapply_gradients\u001b[0;34m(self, grads_and_vars, global_step, name)\u001b[0m\n\u001b[1;32m    589\u001b[0m                        ([str(v) for _, _, v in converted_grads_and_vars],))\n\u001b[1;32m    590\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minit_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 591\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_create_slots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar_list\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    592\u001b[0m     \u001b[0mupdate_ops\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    593\u001b[0m     \u001b[0;32mwith\u001b[0m \u001b[0mops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mname_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/adam.py\u001b[0m in \u001b[0;36m_create_slots\u001b[0;34m(self, var_list)\u001b[0m\n\u001b[1;32m    133\u001b[0m     \u001b[0;31m# Create slots for the first and second moments.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    134\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0mv\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mvar_list\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 135\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_zeros_slot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"m\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    136\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_zeros_slot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mv\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"v\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    137\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/optimizer.py\u001b[0m in \u001b[0;36m_zeros_slot\u001b[0;34m(self, var, slot_name, op_name)\u001b[0m\n\u001b[1;32m   1135\u001b[0m     \u001b[0mnamed_slots\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_slot_dict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mslot_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1136\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0m_var_key\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnamed_slots\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1137\u001b[0;31m       \u001b[0mnew_slot_variable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mslot_creator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcreate_zeros_slot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop_name\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1138\u001b[0m       self._restore_slot_variable(\n\u001b[1;32m   1139\u001b[0m           \u001b[0mslot_name\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mslot_name\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariable\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mvar\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/slot_creator.py\u001b[0m in \u001b[0;36mcreate_zeros_slot\u001b[0;34m(primary, name, dtype, colocate_with_primary)\u001b[0m\n\u001b[1;32m    181\u001b[0m     return create_slot_with_initializer(\n\u001b[1;32m    182\u001b[0m         \u001b[0mprimary\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minitializer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mslot_shape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mname\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 183\u001b[0;31m         colocate_with_primary=colocate_with_primary)\n\u001b[0m\u001b[1;32m    184\u001b[0m   \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    185\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprimary\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariables\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mVariable\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/slot_creator.py\u001b[0m in \u001b[0;36mcreate_slot_with_initializer\u001b[0;34m(primary, initializer, shape, dtype, name, colocate_with_primary)\u001b[0m\n\u001b[1;32m    155\u001b[0m       \u001b[0;32mwith\u001b[0m \u001b[0mdistribution_strategy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolocate_vars_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprimary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    156\u001b[0m         return _create_slot_var(primary, initializer, \"\", validate_shape, shape,\n\u001b[0;32m--> 157\u001b[0;31m                                 dtype)\n\u001b[0m\u001b[1;32m    158\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    159\u001b[0m       return _create_slot_var(primary, initializer, \"\", validate_shape, shape,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/slot_creator.py\u001b[0m in \u001b[0;36m_create_slot_var\u001b[0;34m(primary, val, scope, validate_shape, shape, dtype)\u001b[0m\n\u001b[1;32m     63\u001b[0m       \u001b[0muse_resource\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mresource_variable_ops\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_resource_variable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mprimary\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     64\u001b[0m       \u001b[0mshape\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 65\u001b[0;31m       validate_shape=validate_shape)\n\u001b[0m\u001b[1;32m     66\u001b[0m   \u001b[0mvariable_scope\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_variable_scope\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_partitioner\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrent_partitioner\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     67\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py\u001b[0m in \u001b[0;36mget_variable\u001b[0;34m(name, shape, dtype, initializer, regularizer, trainable, collections, caching_device, partitioner, validate_shape, use_resource, custom_getter, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m   1482\u001b[0m       \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1483\u001b[0m       \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1484\u001b[0;31m       aggregation=aggregation)\n\u001b[0m\u001b[1;32m   1485\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1486\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py\u001b[0m in \u001b[0;36mget_variable\u001b[0;34m(self, var_store, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, use_resource, custom_getter, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m   1232\u001b[0m           \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1233\u001b[0m           \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1234\u001b[0;31m           aggregation=aggregation)\n\u001b[0m\u001b[1;32m   1235\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1236\u001b[0m   def _get_partitioned_variable(self,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py\u001b[0m in \u001b[0;36mget_variable\u001b[0;34m(self, name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, use_resource, custom_getter, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m    536\u001b[0m           \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    537\u001b[0m           \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 538\u001b[0;31m           aggregation=aggregation)\n\u001b[0m\u001b[1;32m    539\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    540\u001b[0m   def _get_partitioned_variable(self,\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py\u001b[0m in \u001b[0;36m_true_getter\u001b[0;34m(name, shape, dtype, initializer, regularizer, reuse, trainable, collections, caching_device, partitioner, validate_shape, use_resource, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m    490\u001b[0m           \u001b[0mconstraint\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mconstraint\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    491\u001b[0m           \u001b[0msynchronization\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msynchronization\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 492\u001b[0;31m           aggregation=aggregation)\n\u001b[0m\u001b[1;32m    493\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    494\u001b[0m     \u001b[0;31m# Set trainable value based on synchronization value.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/variable_scope.py\u001b[0m in \u001b[0;36m_get_single_variable\u001b[0;34m(self, name, shape, dtype, initializer, regularizer, partition_info, reuse, trainable, collections, caching_device, validate_shape, use_resource, constraint, synchronization, aggregation)\u001b[0m\n\u001b[1;32m    857\u001b[0m                          \u001b[0;34m\"reuse=tf.AUTO_REUSE in VarScope? \"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m                          \"Originally defined at:\\n\\n%s\" % (\n\u001b[0;32m--> 859\u001b[0;31m                              name, \"\".join(traceback.format_list(tb))))\n\u001b[0m\u001b[1;32m    860\u001b[0m       \u001b[0mfound_var\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_vars\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mshape\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_compatible_with\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfound_var\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_shape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Variable fullyConnectedLayer1/kernel/Adam/ already exists, disallowed. Did you mean to set reuse=True or reuse=tf.AUTO_REUSE in VarScope? Originally defined at:\n\n  File \"<ipython-input-13-e5a39dcc4f6a>\", line 19, in <module>\n    train_step = tf.train.AdamOptimizer(learning_rate).minimize(error)\n  File \"/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py\", line 2882, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py\", line 2822, in run_ast_nodes\n    if self.run_code(code, result):\n"]}]},{"cell_type":"code","metadata":{"id":"_TV_NzSbI_Au","colab_type":"code","outputId":"725661dd-aa5d-4c6e-e803-7545109637dc","executionInfo":{"status":"error","timestamp":1567666668752,"user_tz":-330,"elapsed":828,"user":{"displayName":"Rahul Pareek","photoUrl":"https://lh3.googleusercontent.com/a-/AAuE7mDEsDJVspDx5UBV261xZxUzCFr5PtbYyLWztMHdvA=s64","userId":"16393584037076024180"}},"colab":{"base_uri":"https://localhost:8080/","height":1000}},"source":["for i in range(1, epochs+1):\n","    \n","    # evaulating the train_step from the given inputs\n","    sess.run(train_step, feed_dict={x: train_images, y: encoded_train_labels})\n","    \n","    # Computing the summary and writing to the tensorboard\n","    # [train_accuracy, s] = sess.run([accuracy, summ], feed_dict={x: train_images, y: encoded_train_labels})\n","    [test_accuracy, s] = sess.run([accuracy, summ], feed_dict={x: test_images, y: encoded_test_labels})\n","    writer.add_summary(s, i)\n","    \n","    # Writing every 5th epoch\n","    if i%5 == 0:\n","      print(\"epoch: {0:} accuracy: {1:.6f}\".format(i, test_accuracy*100))\n","    \n","    # Saving it as a checkpoint\n","    saver.save(sess, os.path.join(checkpoint_save_path, \"model.ckpt\"), i)"],"execution_count":42,"outputs":[{"output_type":"error","ename":"InvalidArgumentError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1291\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1292\u001b[0;31m       \u001b[0;32mreturn\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1293\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0merrors\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run_fn\u001b[0;34m(feed_dict, fetch_list, target_list, options, run_metadata)\u001b[0m\n\u001b[1;32m   1276\u001b[0m       return self._call_tf_sessionrun(\n\u001b[0;32m-> 1277\u001b[0;31m           options, feed_dict, fetch_list, target_list, run_metadata)\n\u001b[0m\u001b[1;32m   1278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_call_tf_sessionrun\u001b[0;34m(self, options, feed_dict, fetch_list, target_list, run_metadata)\u001b[0m\n\u001b[1;32m   1366\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_session\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moptions\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetch_list\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget_list\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1367\u001b[0;31m         run_metadata)\n\u001b[0m\u001b[1;32m   1368\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: You must feed a value for placeholder tensor 'labels_4' with dtype float and shape [?,10]\n\t [[{{node labels_4}} = Placeholder[dtype=DT_FLOAT, shape=[?,10], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]","\nDuring handling of the above exception, another exception occurred:\n","\u001b[0;31mInvalidArgumentError\u001b[0m                      Traceback (most recent call last)","\u001b[0;32m<ipython-input-42-1923577a6888>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m     \u001b[0;31m# evaulating the train_step from the given inputs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m     \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtrain_step\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mtrain_images\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mencoded_train_labels\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0;31m# Computing the summary and writing to the tensorboard\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    885\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    886\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 887\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    888\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    889\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1108\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfinal_fetches\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mfinal_targets\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mhandle\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mfeed_dict_tensor\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1109\u001b[0m       results = self._do_run(handle, final_targets, final_fetches,\n\u001b[0;32m-> 1110\u001b[0;31m                              feed_dict_tensor, options, run_metadata)\n\u001b[0m\u001b[1;32m   1111\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1112\u001b[0m       \u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_run\u001b[0;34m(self, handle, target_list, fetch_list, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1284\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mhandle\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1285\u001b[0m       return self._do_call(_run_fn, feeds, fetches, targets, options,\n\u001b[0;32m-> 1286\u001b[0;31m                            run_metadata)\n\u001b[0m\u001b[1;32m   1287\u001b[0m     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1288\u001b[0m       \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_call\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0m_prun_fn\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhandle\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeeds\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfetches\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_do_call\u001b[0;34m(self, fn, *args)\u001b[0m\n\u001b[1;32m   1306\u001b[0m           self._config.experimental.client_handles_error_formatting):\n\u001b[1;32m   1307\u001b[0m         \u001b[0mmessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0merror_interpolation\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minterpolate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmessage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_graph\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1308\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mtype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0me\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnode_def\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mop\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmessage\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1309\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1310\u001b[0m   \u001b[0;32mdef\u001b[0m \u001b[0m_extend_graph\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mInvalidArgumentError\u001b[0m: You must feed a value for placeholder tensor 'labels_4' with dtype float and shape [?,10]\n\t [[{{node labels_4}} = Placeholder[dtype=DT_FLOAT, shape=[?,10], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n\nCaused by op 'labels_4', defined at:\n  File \"/usr/lib/python3.6/runpy.py\", line 193, in _run_module_as_main\n    \"__main__\", mod_spec)\n  File \"/usr/lib/python3.6/runpy.py\", line 85, in _run_code\n    exec(code, run_globals)\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py\", line 16, in <module>\n    app.launch_new_instance()\n  File \"/usr/local/lib/python3.6/dist-packages/traitlets/config/application.py\", line 658, in launch_instance\n    app.start()\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel/kernelapp.py\", line 477, in start\n    ioloop.IOLoop.instance().start()\n  File \"/usr/local/lib/python3.6/dist-packages/tornado/ioloop.py\", line 888, in start\n    handler_func(fd_obj, events)\n  File \"/usr/local/lib/python3.6/dist-packages/tornado/stack_context.py\", line 277, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/zmq/eventloop/zmqstream.py\", line 450, in _handle_events\n    self._handle_recv()\n  File \"/usr/local/lib/python3.6/dist-packages/zmq/eventloop/zmqstream.py\", line 480, in _handle_recv\n    self._run_callback(callback, msg)\n  File \"/usr/local/lib/python3.6/dist-packages/zmq/eventloop/zmqstream.py\", line 432, in _run_callback\n    callback(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/tornado/stack_context.py\", line 277, in null_wrapper\n    return fn(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\", line 283, in dispatcher\n    return self.dispatch_shell(stream, msg)\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\", line 235, in dispatch_shell\n    handler(stream, idents, msg)\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel/kernelbase.py\", line 399, in execute_request\n    user_expressions, allow_stdin)\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel/ipkernel.py\", line 196, in do_execute\n    res = shell.run_cell(code, store_history=store_history, silent=silent)\n  File \"/usr/local/lib/python3.6/dist-packages/ipykernel/zmqshell.py\", line 533, in run_cell\n    return super(ZMQInteractiveShell, self).run_cell(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py\", line 2718, in run_cell\n    interactivity=interactivity, compiler=compiler, result=result)\n  File \"/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py\", line 2822, in run_ast_nodes\n    if self.run_code(code, result):\n  File \"/usr/local/lib/python3.6/dist-packages/IPython/core/interactiveshell.py\", line 2882, in run_code\n    exec(code_obj, self.user_global_ns, self.user_ns)\n  File \"<ipython-input-13-e5a39dcc4f6a>\", line 5, in <module>\n    y = tf.placeholder(tf.float32, shape=[None, 10], name=\"labels\")\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/array_ops.py\", line 1745, in placeholder\n    return gen_array_ops.placeholder(dtype=dtype, shape=shape, name=name)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/gen_array_ops.py\", line 5020, in placeholder\n    \"Placeholder\", dtype=dtype, shape=shape, name=name)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/op_def_library.py\", line 787, in _apply_op_helper\n    op_def=op_def)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/util/deprecation.py\", line 488, in new_func\n    return func(*args, **kwargs)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py\", line 3272, in create_op\n    op_def=op_def)\n  File \"/usr/local/lib/python3.6/dist-packages/tensorflow/python/framework/ops.py\", line 1768, in __init__\n    self._traceback = tf_stack.extract_stack()\n\nInvalidArgumentError (see above for traceback): You must feed a value for placeholder tensor 'labels_4' with dtype float and shape [?,10]\n\t [[{{node labels_4}} = Placeholder[dtype=DT_FLOAT, shape=[?,10], _device=\"/job:localhost/replica:0/task:0/device:CPU:0\"]()]]\n"]}]},{"cell_type":"code","metadata":{"id":"y1wc_QVuLeir","colab_type":"code","colab":{}},"source":["# Initializing the tensorflow save builder\n","builder = tf.saved_model.builder.SavedModelBuilder(model_save_path)\n","\n","# Computing the input and output tensor information \n","tensor_info_x = tf.saved_model.utils.build_tensor_info(x)\n","tensor_info_y = tf.saved_model.utils.build_tensor_info(logits)\n","\n","# Creating the prediction signature\n","prediction_signature = (\n","    tf.saved_model.signature_def_utils.build_signature_def(\n","        inputs={'images': tensor_info_x},\n","        outputs={'scores': tensor_info_y},\n","        method_name=tf.saved_model.signature_constants.PREDICT_METHOD_NAME\n","    )\n",")\n","\n","# Adding the signature to the graph\n","builder.add_meta_graph_and_variables(\n","      sess, [tf.saved_model.tag_constants.SERVING],\n","      signature_def_map={\n","          'predict_images':\n","              prediction_signature\n","      }\n",")\n","\n","# Saving the model (production serving model)\n","builder.save()"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"FpJzv2rxNzY6","colab_type":"code","colab":{}},"source":["!zip -r tfmodel.zip tfmodel"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"9_7-Tp8FN2ph","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}